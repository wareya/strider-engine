<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">//Jumping
if (keyboard_check_pressed(key_jump) and place_meeting(x, y+1, wallchunk))
{
    vspeed -= jumppower;
    jump = true;
}

if (!keyboard_check(key_jump) or vspeed &gt; 0)
    jump = false;

if (keyboard_check(key_jump) and jump)
    grav = lowgrav;
else
    grav = fallgrav;

//Decide desired direction - nonull style
if (keyboard_check_pressed(key_right) and keyboard_check_pressed(key_left))
{   d_dir = 0;
}
else
{   //Release right while holding left goes left...
    if (keyboard_check_released(key_right) and keyboard_check(key_left))
        d_dir = -1;
    if (keyboard_check_released(key_left) and keyboard_check(key_right))
        d_dir = 1;
    //Pressing right always fore right...
    if (keyboard_check_pressed(key_right))
        d_dir = 1;
    if (keyboard_check_pressed(key_left))
        d_dir = -1;
    if (!keyboard_check(key_right) and !keyboard_check(key_left))
        d_dir = 0;
}

if(d_dir == 1)
{   hspeed += accel;
    
    //First add double normal friction if currently moving left
    if (hspeed &lt; 0)
    {   if (place_meeting(x, y+1, wallchunk))
            hspeed /= power(fric, 2);
        else
        {   hspeed /= fric;
            hspeed /= airres;
        }
    }
    //Don't add friction if we're just starting; add more friction (approaching whole) as we approach max speed with a linear ramp from 1/2 speed = 0 friction.
    else
    {   fricfactor = max(0, abs(hspeed/fric)/maxspeed*2-1);
        curvefactor = (fric-1)
        newcurved = fricfactor * curvefactor;
        hspeed /= newcurved+1;
    }
}
else if(d_dir == -1)
{   hspeed -= accel;
    
    //See comments on same section of left-turning; mirror everything
    if (hspeed &gt; 0)
    {   if (place_meeting(x, y+1, wallchunk))
            hspeed /= power(fric, 2);
        else
        {   hspeed /= fric;
            hspeed /= airres;
        }
    }
    else
    {   fricfactor = max(0, abs(hspeed/fric)/maxspeed*2-1);
        curvefactor = (fric-1)
        newcurved = fricfactor * curvefactor;
        hspeed /= newcurved+1;
    }
}
else if(d_dir == 17)
{   //Reserved for if I want a "Keep going current direction at current speed" feature. I probably won't, but it'll be useful.
    //No, I'm not putting anything here even if I end up using it. No code is best code.
}
else // d_dir == 0
{   if (place_meeting(x, y+1, wallchunk))
        hspeed /= fric;
    else
        hspeed /= airres;
}
if(abs(hspeed) &lt; 0.067)
{   hspeed = 0;
    x = round(x);
}

vspeed += grav;
vspeed /= airres;
</argument>
      </arguments>
    </action>
  </actions>
</event>
